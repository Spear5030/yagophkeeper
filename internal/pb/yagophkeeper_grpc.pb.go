// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: yagophkeeper.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	YaGophKeeper_RegisterUser_FullMethodName = "/yagophkeeper.YaGophKeeper/RegisterUser"
	YaGophKeeper_LoginUser_FullMethodName    = "/yagophkeeper.YaGophKeeper/LoginUser"
	YaGophKeeper_Ping_FullMethodName         = "/yagophkeeper.YaGophKeeper/Ping"
)

// YaGophKeeperClient is the client API for YaGophKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YaGophKeeperClient interface {
	RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error)
	LoginUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type yaGophKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewYaGophKeeperClient(cc grpc.ClientConnInterface) YaGophKeeperClient {
	return &yaGophKeeperClient{cc}
}

func (c *yaGophKeeperClient) RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, YaGophKeeper_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yaGophKeeperClient) LoginUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, YaGophKeeper_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yaGophKeeperClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, YaGophKeeper_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YaGophKeeperServer is the server API for YaGophKeeper service.
// All implementations must embed UnimplementedYaGophKeeperServer
// for forward compatibility
type YaGophKeeperServer interface {
	RegisterUser(context.Context, *User) (*AuthResponse, error)
	LoginUser(context.Context, *User) (*AuthResponse, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedYaGophKeeperServer()
}

// UnimplementedYaGophKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedYaGophKeeperServer struct {
}

func (UnimplementedYaGophKeeperServer) RegisterUser(context.Context, *User) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedYaGophKeeperServer) LoginUser(context.Context, *User) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedYaGophKeeperServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedYaGophKeeperServer) mustEmbedUnimplementedYaGophKeeperServer() {}

// UnsafeYaGophKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YaGophKeeperServer will
// result in compilation errors.
type UnsafeYaGophKeeperServer interface {
	mustEmbedUnimplementedYaGophKeeperServer()
}

func RegisterYaGophKeeperServer(s grpc.ServiceRegistrar, srv YaGophKeeperServer) {
	s.RegisterService(&YaGophKeeper_ServiceDesc, srv)
}

func _YaGophKeeper_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaGophKeeperServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YaGophKeeper_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaGophKeeperServer).RegisterUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _YaGophKeeper_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaGophKeeperServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YaGophKeeper_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaGophKeeperServer).LoginUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _YaGophKeeper_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaGophKeeperServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YaGophKeeper_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaGophKeeperServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// YaGophKeeper_ServiceDesc is the grpc.ServiceDesc for YaGophKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YaGophKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yagophkeeper.YaGophKeeper",
	HandlerType: (*YaGophKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _YaGophKeeper_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _YaGophKeeper_LoginUser_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _YaGophKeeper_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yagophkeeper.proto",
}
